$gridSizes: (1, 2, 3, 4, 5, 6);

.d-grid {
  display: grid;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(12.5rem, 1fr));
  //grid-template-rows: repeat(auto-fit, minmax(10rem, 1fr));
  gap: 1.875rem;
}

@each $size in $gridSizes {
  .grid-column-#{$size} {
    grid-column: span $size;
  }

  .grid-row-#{$size} {
    grid-row: span $size;
  }

  grid-gap-#{$size} {
    gap: $size * 10px;
  }

  grid-gap-#{$size}5 {
    gap: $size * 10px + 5px;
  }
}

.grid-column-full {
  grid-column: 1 / -1;
}

.grid-row-full {
  grid-row: 1 / -1;
}

$gridModes: (
  "fit": auto-fit,
  "fill": auto-fill,
);

@each $columnSize in $gridSizes {

  @each $label, $mode in $gridModes {
    .grid-column-#{$label}-#{$columnSize} {
      @extend .grid-container;
      grid-template-columns: repeat($mode, minmax($columnSize * 100px, 1fr));
    }
    .grid-column-#{$label}-#{$columnSize}50 {
      @extend .grid-container;
      grid-template-columns: repeat($mode, minmax($columnSize * 100px + 50px, 1fr));
    }

    .grid-row-#{$label}-#{$columnSize} {
      @extend .grid-container;
      grid-template-rows: repeat(auto-fit, minmax($columnSize * 100px, 1fr));
    }

    .grid-row-#{$label}-#{$columnSize}50 {
      @extend .grid-container;
      grid-template-rows: repeat(auto-fit, minmax($columnSize * 100px + 50px, 1fr));
    }
  }
}
